import tkinter as tk
from tkinter import ttk
from tkinter.scrolledtext import ScrolledText
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≤–∫–ª–∞–¥–∫–∏ "–ê—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞"
def build_assoc_rules_tab(nb, df):
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ—Ä–µ–π–º (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä) —É Notebook
    frame = ttk.Frame(nb)
    # –î–æ–¥–∞—î–º–æ —Ü–µ–π —Ñ—Ä–µ–π–º —è–∫ –Ω–æ–≤—É –≤–∫–ª–∞–¥–∫—É –∑ –Ω–∞–∑–≤–æ—é
    nb.add(frame, text="–ê—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏
    ttk.Label(frame,
              text="–ê—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É",
              font=("Arial", 16, "bold"),   # –≤–µ–ª–∏–∫–∏–π –∂–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç
              foreground="navy"             # —Ç–µ–º–Ω–æ-—Å–∏–Ω—ñ–π –∫–æ–ª—ñ—Ä
              ).pack(pady=10)               # –≤—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É/–∑–Ω–∏–∑—É

    # –Ø–∫—â–æ DataFrame –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ
    if df.empty:
        ttk.Label(frame, text="–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É").pack(pady=20)
        return

    # --- –î–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—è (–ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó) ---
    disc = pd.DataFrame()
    if "temp_c" in df.columns:
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ 3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        disc["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"] = pd.cut(df["temp_c"],
                                     bins=[-100,0,10,100],
                                     labels=["—Ö–æ–ª–æ–¥–Ω–æ","–ø–æ–º—ñ—Ä–Ω–æ","—Ç–µ–ø–ª–æ"])
    if "wind_mps" in df.columns:
        # –í—ñ—Ç–µ—Ä: —Å–ª–∞–±–∫–∏–π/—Å–µ—Ä–µ–¥–Ω—ñ–π/—Å–∏–ª—å–Ω–∏–π
        disc["–í—ñ—Ç–µ—Ä"] = pd.cut(df["wind_mps"],
                               bins=[-1,3,7,100],
                               labels=["—Å–ª–∞–±–∫–∏–π","—Å–µ—Ä–µ–¥–Ω—ñ–π","—Å–∏–ª—å–Ω–∏–π"])
    if "is_holiday" in df.columns:
        # –°–≤—è—Ç–æ: 0 ‚Üí —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å, 1 ‚Üí —Å–≤—è—Ç–æ
        disc["–°–≤—è—Ç–æ"] = df["is_holiday"].map({0:"—Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å",1:"—Å–≤—è—Ç–æ"})
    if "load_mw" in df.columns:
        # –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: –≤–∏—â–µ/–Ω–∏–∂—á–µ –º–µ–¥—ñ–∞–Ω–∏
        median_load = df["load_mw"].median()
        disc["–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"] = df["load_mw"].apply(
            lambda v: "–≤–∏—Å–æ–∫–µ" if v>=median_load else "–Ω–∏–∑—å–∫–µ"
        )

    # –Ø–∫—â–æ –ø—ñ—Å–ª—è –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–π—à–ª–æ
    if disc.empty:
        ttk.Label(frame, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –ø—Ä–∞–≤–∏–ª").pack(pady=20)
        return

    # --- –ü–æ–±—É–¥–æ–≤–∞ –∞—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª ---
    onehot = pd.get_dummies(disc)  # –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —É one-hot —Ñ–æ—Ä–º–∞—Ç
    freq = apriori(onehot, min_support=0.1, use_colnames=True)  # —à—É–∫–∞—î–º–æ —á–∞—Å—Ç—ñ –Ω–∞–±–æ—Ä–∏
    rules = association_rules(freq, metric="confidence", min_threshold=0.6)  # –≥–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞
    if rules.empty:
        ttk.Label(frame, text="–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ").pack(pady=20)
        return
    # –°–æ—Ä—Ç—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞ lift (—Å–∏–ª–∞ –∑–≤‚Äô—è–∑–∫—É)
    rules = rules.sort_values(by="lift", ascending=False)

    # --- –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞: —Ç–µ–∫—Å—Ç –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é ---
    left = ttk.Frame(frame)
    left.pack(side="left", fill="both", expand=True, padx=10, pady=10)

    text = ScrolledText(left, wrap="word", font=("Consolas", 12))
    text.pack(fill="both", expand=True)

    text.insert("end", "üìä –¢–æ–ø-20 –∞—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª\n\n")

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º–Ω–æ–∂–∏–Ω —É —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥
    def fmt(itemset):
        return ", ".join([s.replace("_", " = ") for s in itemset])

    # –í–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à—ñ 20 –ø—Ä–∞–≤–∏–ª —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–∏–≥–ª—è–¥—ñ
    for i, (_, row) in enumerate(rules.head(20).iterrows(), start=1):
        text.insert("end", f"{i}. {fmt(row['antecedents'])} ‚Üí {fmt(row['consequents'])}\n")
        text.insert("end", f"   support={row['support']:.2f}, "
                           f"conf={row['confidence']:.2f}, "
                           f"lift={row['lift']:.2f}\n\n")

    # –î–æ–¥–∞—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
    text.insert("end", "support = —á–∞—Å—Ç–æ—Ç–∞, confidence = –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å, lift = —Å–∏–ª–∞ –∑–≤‚Äô—è–∑–∫—É\n")

    # --- –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞: —Ç–∞–±–ª–∏—Ü—è –∑ –ø–æ–ª–∑—É–Ω–∫–∞–º–∏ ---
    right = ttk.Frame(frame)
    right.pack(side="right", fill="both", expand=True, padx=10, pady=10)

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Canvas + Scrollbars
    table_container = ttk.Frame(right)
    table_container.pack(fill="both", expand=True)

    canvas = tk.Canvas(table_container)
    canvas.pack(side="left", fill="both", expand=True)

    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —Å–∫—Ä–æ–ª–±–∞—Ä
    vscroll = tk.Scrollbar(table_container, orient="vertical", command=canvas.yview)
    vscroll.pack(side="right", fill="y")

    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π —Å–∫—Ä–æ–ª–±–∞—Ä
    hscroll = tk.Scrollbar(right, orient="horizontal", command=canvas.xview)
    hscroll.pack(side="bottom", fill="x")

    # –ü—Ä–∏–≤‚Äô—è–∑—É—î–º–æ —Å–∫—Ä–æ–ª–±–∞—Ä–∏ –¥–æ Canvas
    canvas.configure(yscrollcommand=vscroll.set, xscrollcommand=hscroll.set)

    # –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–∞–±–ª–∏—Ü—é —É Canvas
    table_frame = ttk.Frame(canvas)
    canvas.create_window((0,0), window=table_frame, anchor="nw")

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
    headers = ["ANTE–°EDENTS", "CONSEQUENTS", "SUPPORT", "CONFIDENCE", "LIFT"]
    for j, h in enumerate(headers):
        tk.Label(table_frame, text=h,
                 font=("Arial", 12, "bold"),
                 fg="white", bg="navy",          # –±—ñ–ª–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–Ω—å–æ–º—É —Ñ–æ–Ω—ñ
                 borderwidth=1, relief="solid",  # —Ä–∞–º–∫–∞
                 padx=8, pady=5                  # –≤—ñ–¥—Å—Ç—É–ø–∏
                 ).grid(row=0, column=j, sticky="nsew")

    # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è–º –∫–æ–ª—å–æ—Ä—ñ–≤ —Ä—è–¥–∫—ñ–≤
    for i, (_, row) in enumerate(rules.head(20).iterrows(), start=1):
        antecedents = fmt(row["antecedents"])
        consequents = fmt(row["consequents"])
        values = [antecedents, consequents,
                  f"{row['support']:.2f}",
                  f"{row['confidence']:.2f}",
                  f"{row['lift']:.2f}"]

        # –ß–µ—Ä–µ–¥—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ä—è–¥–∫—ñ–≤: —Å—ñ—Ä–∏–π/–±—ñ–ª–∏–π
        bg_color = "#f9f9f9" if i % 2 == 0 else "white"

        for j, val in enumerate(values):
            tk.Label(table_frame, text=val,
                     font=("Consolas", 11),
                     borderwidth=1, relief="solid",
                     anchor="w", justify="left",  # –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –≤–ª—ñ–≤–æ
                     wraplength=600,              # –ø–µ—Ä–µ–Ω–æ—Å —Ä—è–¥–∫—ñ–≤
                     padx=8, pady=5,
                     bg=bg_color                  # —Ñ–æ–Ω —Ä—è–¥–∫–∞
                     ).grid(row=i, column=j, sticky="nsew")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫
    for j in range(len(headers)):
        table_frame.grid_columnconfigure(j, weight=1)

    # –û–Ω–æ–≤–ª—é—î–º–æ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ Canvas
    table_frame.update_idletasks()
    canvas.config(scrollregion=canvas.bbox("all"))